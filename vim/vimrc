" Load Plugins {{{
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Use release branch (recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" You should install flake8 or pylint for syntastic
" Plug 'dense-analysis/ale'
Plug 'fatih/vim-go'
Plug 'fvdnabee/a.vim'
Plug 'mileszs/ack.vim'
Plug 'kien/ctrlp.vim'
Plug 'Lokaltog/vim-easymotion'
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/nerdfont.vim'
Plug 'lambdalisue/fern-git-status.vim'
Plug 'lambdalisue/fern-renderer-nerdfont.vim'
Plug 'lambdalisue/fern-hijack.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" vim airline, note that you will need a patched powerline font for this, see
" http://vi.stackexchange.com/a/3363
Plug 'vim-airline/vim-airline'
" Tagbar, class outline viewer:
" Plug 'majutsushi/tagbar'
" git integration in vim:
Plug 'tpope/vim-fugitive'
" GitHub extension for fugitive.vim
" Requires curl and a .netrc file, cfr. https://github.com/tpope/vim-rhubarb
Plug 'tpope/vim-rhubarb'
" Easy jumping between buffers:
Plug 'tpope/vim-unimpaired'
" better JSON syntax highlighting:
Plug 'elzr/vim-json'
" save vim sessions:
" Plug 'tpope/vim-obsession'
Plug 'vim-python/python-syntax'
Plug 'tell-k/vim-autopep8'
" show git diff in the vim gutter:
Plug 'airblade/vim-gitgutter'
Plug 'towolf/vim-helm'

" themes:
" wombat256mod colour scheme for vim:
Plug 'vim-scripts/wombat256.vim'
" Solarized colour scheme for vim:
Plug 'altercation/vim-colors-solarized'
" Base16 colour scheme for vim:
" Plug 'chriskempson/base16-vim'
" Gruvbox
Plug 'morhetz/gruvbox'
" Terraform in vim
Plug 'hashivim/vim-terraform'

" Javascript:
" Plug 'pangloss/vim-javascript'    " JavaScript support
" Plug 'leafgarland/typescript-vim' " TypeScript syntax
Plug 'maxmellon/vim-jsx-pretty'   " JS and JSX syntax

" Debugging:
" vimspector_enable_mappings must be set before loading vimspector:
let g:vimspector_enable_mappings = 'VISUAL_STUDIO'
Plug 'puremourning/vimspector'

" Initialize plugin system
call plug#end()
" }}}
" Whitespace, color and fonts {{{
" Show whitespace
" MUST be inserted BEFORE the colorscheme command
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=white guibg=white
au InsertLeave * match ExtraWhitespace /\s\+$/

" Color schemes
" 1) wombat256mod
" mkdir -p ~/.vim/colors && cd ~/.vim/colors
" wget -O wombat256mod.vim http://www.vim.org/scripts/download_script.php?src_id=13400
" set t_Co=256
" colorscheme wombat256mod
" 2) solarized:
" let g:solarized_termcolors=256
" set t_Co=256
" set background=dark
" colorscheme solarized
" 3) base16:
" let base16colorspace=256
" set background=dark
" colorscheme base16-colors
" 4) gruvbox:
" set termguicolors
let g:gruvbox_italic=1
let g:gruvbox_contrast_dark='high'
set background=dark    " Setting dark mode
let g:gruvbox_guisp_fallback = "bg" " Fix highlighting for SpellBad, see https://github.com/morhetz/gruvbox/issues/175
colorscheme gruvbox

" Font for gvim:
set guifont=MesloLGS\ NF\ 10

" }}}
" UI Layout {{{
set cursorline	" Highlight current line
set showmatch	" higlight matching parenthesis
set tw=79	" width of document (used by gd)
set nowrap	" don't automatically wrap on load
set fo-=t	" don't automatically wrap text when typing
set scrolloff=3 " lines of text around cursor

set showcmd	" show command in bottom bar
set wildmenu	" show command-line completion matches just above the command line

set hidden 	" don't ask for confirmation for hidden buffers
" Colour column 80
set colorcolumn=80
highlight ColorColumn ctermbg=233

" }}}
" Relative/absolute line numbers {{{
" Showing line numbers, the following two lines will always show the absolute
" line number for the cursor line and the surrounding lines will show the
" relative line number
set number	" show line numbers
set relativenumber " show relative line numbers, easy for moving around with j/k

" function to toggle between abs and rel line numbers
function! RelativeNumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap <C-n> :call RelativeNumberToggle()<cr>

" }}}
" Searching {{{
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set ignorecase 		" case-insensitive search (but also see next option)
set smartcase		" make search case insensitive when no upper case letters are found in the search pattern
" }}}
" Spaces & Tabs {{{
" Enable filetype detection, indentation and syntax highlighting
filetype plugin on
filetype indent on
syntax on

" Set foldingmethod to syntax, note this requires a syntax file for every language in syntax
set foldmethod=syntax

nnoremap <space> za	" space open/closes folds

set tabpagemax=30 	" Increase number of tabs
set modelines=1		" Search the last line of a file for file-specific vimrc modes

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv " better indentation
vnoremap > >gv " better indentation
" }}}
" Leader {{{
" Rebind <Leader> key
" I like to have it here becuase it is easier to reach than the default and
" it is next to ``m`` and ``n`` which I use for navigating between tabs.
" let mapleader = ","

" easier moving between tabs
"map <Leader>n <esc>:tabprevious<CR>
"map <Leader>m <esc>:tabnext<CR>

" splits like in tmux (but with different leader):
map <Leader>%  :vsplit<cr>
map <Leader>"  :split<cr>

" Easier navigation between buffers:
" map <Leader>p :bn<cr>  " use tpope/vim-unimpiared
" map <Leader>o :bp<cr>  " use tpope/vim-unimpiared
" map <Leader>d :bd<cr>
" Just use :bd<cr>
" map <Leader>d :bp\|bd #<cr> " Keep window open, only close buffer
command! Bd bp|bd #
map <Leader>w :close<cr>

nnoremap <F4> :buffers<CR>:buffer<Space>

" open new tab with <Leader>T
map <Leader>T <esc>:tabnew<CR>

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" Rebind tag next
map <Leader>b <esc>:tn<CR>
map <Leader>v <esc>:tp<CR>

" Open buffers vertically as opposed to horizontally in diff mode:
set diffopt+=vertical
" }}}
" Quick save/quit {{{
" Quicksave command
noremap <C-s> :update<CR>
vnoremap <C-s> <C-C>:update<CR>
inoremap <C-s> <C-O>:update<CR>

" Quick quit command
noremap <Leader>e :quit<CR>	" Quit current window
noremap <Leader>E :qa!<CR> 	" Quit all windows

" Quick quick+save command
noremap <Leader>x :x<CR> 	" Quit and save current window
" }}}
" Misc key mappings {{{
" bind Ctrl+<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
" Every unnecessary keystroke that can be saved is good for your health :)
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" Goto the next/previous error in source code remapping or search match
" map cn <esc>:cn<cr>
" map cp <esc>:cp<cr>
" nmap <silent> <RIGHT> :cnext<CR>
" nmap <silent> <LEFT> :cprev<CR>

" scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" highlight last inserted text
nnoremap gV `[v`]

" jk is escape
inoremap jk <esc>

" easier formatting of paragraphs (for text input)
vmap Q gq
nmap Q gqap
" }}}
" Misc {{{
set ttyfast	" faster redraw
" Useful settings
set history=700
set undolevels=700
" Mouse and backspace
set mouse+=a	" enable mouse (on OSX press ALT and click)
" https://superuser.com/a/1017587/219425
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end
set backspace=2	" make backspace behave like normal again

" Custom C function colors
"hi cCustomFunc  gui=bold guifg=yellowgreen
"hi cCustomClass gui=reverse guifg=#00FF00

" Ignore specific files/directories:
:set wildignore+=*.o,*.d,.git,.svn,*/doxygen-html/*,*/userlevel/*

" Automatic reloading of .vimrc
" autocmd! bufwritepost .vimrc source %

" Better copy & paste
" When you want to paste large blocks of code into vim, press F2 before you
" paste. At the bottom you should see ``-- INSERT (paste) --``.
set pastetoggle=<F2>
set clipboard=unnamed

" Automatically regenerate tag files
" autocmd BufWritePost *.cc,*.hh,*.c,*.h silent! !/usr/bin/ctags -R 2> /dev/null &
"set tags=./tags,./TAGS;$HOME " 1. tags, 2. TAGS, 3.â€¦ until $HOME
set tags=tags;/

" Store vim swapfiles in a central place
" Make sure the directory exists, or vim won't use it (it won't create it for you).
" https://vi.stackexchange.com/a/16047
set directory^=$HOME/.vim/swap//
" }}}
" coc.nvim {{{
let g:coc_global_extensions = [
\ 'coc-pyright',
\ 'coc-json',
\ 'coc-yaml',
\ 'coc-tsserver',
\ 'coc-eslint',
\ 'coc-prettier',
\ 'coc-html',
\ 'coc-css',
\ 'coc-clangd',
\ ]

" remap for complete to use tab and <cr>
" https://github.com/neoclide/coc.nvim/pull/3862
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <C-x><C-z> coc#pum#visible() ? coc#pum#stop() : "\<C-x>\<C-z>"
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" " Use `[g` and `]g` to navigate diagnostics
" " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
" Following two don't work for coc-python and coc-pyright
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')
nmap <leader>F :Format<CR>

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
nmap <leader>al  <Plug>(coc-codeaction-line)

" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" View output of :CocDiagnostics
nnoremap <F7> :CocDiagnostics<CR>
"
" Workaround for cursor sometimes disappearing when using coc:
" https://github.com/neoclide/coc.nvim/issues/1775#issuecomment-757764053
let g:coc_disable_transparent_cursor = 1
" }}}
" CtrlP {{{
nmap <C-\> :CtrlPBuffer<CR>
 " <C-_> is ctrl forward slash
nmap <C-_> :CtrlPMRU<CR>

let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:100'
let g:ctrlp_switch_buffer = 0
"let g:ctrlp_working_path_mode = 0
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
" note ctrlp_custom_ignore does not work if you use a custom user command (like
" ag), see ctrlp_user_command in next section on how to ignore files with ah
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist|venv|env)|(\.(swp|ico|git|svn|pyc|egg))$'
" additional root markers for ctrlp:
let g:ctrlp_root_markers = ['.ctrlp']
" }}}
" The Silver Searcher (ag) {{{
" Urge Vim to use ag for :grep commands
if executable('ag')
	" Note we extract the column as well as the file and line number
	" set grepprg=ag\ --nogroup\ --nocolor\ --column
	" set grepformat=%f:%l:%c%m

	" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
	" let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
	let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
	      \ --ignore .git
	      \ --ignore .svn
	      \ --ignore .hg
	      \ --ignore .DS_Store
	      \ --ignore "**/*.pyc"
	      \ --ignore env
	      \ --ignore venv
	      \ --ignore notebooks
	      \ --ignore node_modules
	      \ -g ""'

	" ag is fast enough that CtrlP doesn't need to cache
	" let g:ctrlp_use_caching = 0

	" Specify the ack.vim plugin to use ag
	" The benefit of combining Ag with Ack is that Ack's Quickfix window has useful short cuts
	let g:ackprg = 'ag --nogroup --nocolor --column --ignore tags'
endif

" bind <Leader>K to Ack word under cursor
nnoremap <Leader>K :Ack!<CR>
" nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" }}}
" NERDTree {{{
" Start with NERDTree opened
" autocmd VimEnter waits until all initialization is finished (plugins are loaded)
" autocmd VimEnter * NERDTree
" autocmd VimEnter * wincmd p
" let g:nerdtree_tabs_open_on_console_startup=1
" NERDTree on right side
" let g:NERDTreeWinPos = "right"

" Toggle NERDTree accross all tabs:
" nmap <F3> :NERDTreeTabsToggle<CR>
" nmap <F3> :NERDTreeToggle<CR>
" autocmd VimEnter * NERDTreeTabsToggle
" nmap <Leader>n :NERDTreeFind<CR>

" Ignore __pycache__ folders
" let NERDTreeIgnore=["__pycache__"]
"" }}}
" fern.vim {{{
" Custom settings and mappings.
let g:fern#disable_default_mappings = 1

" Exclude __pycache__
let g:fern#default_exclude = '__pycache__'

noremap <silent> <F3> :Fern . -drawer -toggle -stay -width=35<CR><C-w>=

noremap <silent> <Leader>n :Fern . -drawer -reveal=% -width=35<CR><C-w>=

function! FernInit() abort
  nmap <buffer><expr>
        \ <Plug>(fern-my-open-expand-collapse)
        \ fern#smart#leaf(
        \   "\<Plug>(fern-action-open:select)",
        \   "\<Plug>(fern-action-expand)",
        \   "\<Plug>(fern-action-collapse)",
        \ )
  nmap <buffer> <CR> <Plug>(fern-my-open-expand-collapse)
  nmap <buffer> <2-LeftMouse> <Plug>(fern-my-open-expand-collapse)
  nmap <buffer> n <Plug>(fern-action-new-path)
  nmap <buffer> d <Plug>(fern-action-remove)
  nmap <buffer> m <Plug>(fern-action-move)
  nmap <buffer> M <Plug>(fern-action-rename)
  nmap <buffer> h <Plug>(fern-action-hidden:toggle)
  nmap <buffer> r <Plug>(fern-action-reload)
  " nmap <buffer> k <Plug>(fern-action-mark:toggle)
  nmap <buffer> b <Plug>(fern-action-open:split)
  nmap <buffer> v <Plug>(fern-action-open:vsplit)
  nmap <buffer><nowait> < <Plug>(fern-action-leave)
  nmap <buffer><nowait> > <Plug>(fern-action-enter)
endfunction

augroup FernGroup
  autocmd!
  autocmd FileType fern call FernInit()
augroup END

" https://github.com/lambdalisue/fern-renderer-nerdfont.vim
let g:fern#renderer = "nerdfont"

" https://github.com/lambdalisue/fern-git-status.vim
" Disable listing ignored files/directories
let g:fern_git_status#disable_ignored = 0
" }}}
" AutoGroups {{{
augroup configgroup
	autocmd!
	autocmd FileType cc setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab shiftround
	autocmd FileType c setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab shiftround
	autocmd FileType hh setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab shiftround
	autocmd FileType h setlocal shiftwidth=2 tabstop=2

	autocmd FileType python setlocal foldmethod=indent
	autocmd FileType python setlocal shiftwidth=4
	autocmd FileType python setlocal tabstop=4
	autocmd FileType python setlocal softtabstop=4
	autocmd FileType python setlocal expandtab
	autocmd FileType python setlocal shiftround
	autocmd FileType python setlocal commentstring=#\ %s
	autocmd FileType python setlocal colorcolumn=160
	"autocmd FileType python setlocal equalprg=/usr/lib/python3.7/Tools/scripts/reindent.py
	autocmd FileType py setlocal filetype=python

	autocmd FileType html setlocal foldmethod=marker
	autocmd FileType html setlocal foldmarker={,}
	autocmd Filetype html setlocal shiftwidth=4 tabstop=4 softtabstop=0 expandtab
	autocmd FileType css setlocal foldmethod=syntax
	autocmd Filetype css setlocal tabstop=4
	autocmd Filetype css setlocal shiftwidth=4 tabstop=4 softtabstop=0 expandtab
	autocmd FileType javascript,typescript,typescriptreact setlocal foldmethod=marker
	autocmd FileType javascript,typescript,typescriptreact setlocal foldmarker={,}
	autocmd Filetype javascript,typescript,typescriptreact setlocal shiftwidth=2 tabstop=2 softtabstop=0 expandtab

	autocmd FileType ruby setlocal tabstop=2
	autocmd FileType ruby setlocal shiftwidth=2
	autocmd FileType ruby setlocal expandtab
	autocmd FileType ruby setlocal softtabstop=2
	autocmd FileType ruby setlocal commentstring=#\ %s
	autocmd FileType ruby setlocal shiftround
	autocmd FileType rb setlocal filetype=ruby 

	autocmd FileType java setlocal noexpandtab
	autocmd FileType java setlocal list
	autocmd FileType java setlocal listchars=tab:+\ ,eol:-
	autocmd FileType java setlocal formatprg=par\ -w80\ -T4

	autocmd FileType matlab setlocal tabstop=4
	autocmd FileType matlab setlocal expandtab
	autocmd FileType matlab setlocal shiftwidth=4

	autocmd BufEnter *.click set filetype=click
	" autocmd BufEnter *.conf set filetype=click
	" autocmd BufEnter *.cfg set filetype=click

	autocmd BufEnter Makefile setlocal noexpandtab

	autocmd BufEnter *.sh setlocal tabstop=2
	autocmd BufEnter *.sh setlocal shiftwidth=2
	autocmd BufEnter *.sh setlocal softtabstop=2

	" add yaml stuffs
	autocmd FileType yaml,yml setlocal ts=2 sts=2 sw=2 expandtab indentkeys-=0# indentkeys-=<:>

	autocmd FileType go setlocal shiftwidth=4 tabstop=4 softtabstop=4 noexpandtab
augroup END
" }}}
" Misc plugins {{{
" Use clang autocomplete
" let g:clang_use_library = 1

" Alternate header definition
" let g:alternateExtensions_CC = "hh"
" let g:alternateExtensions_HH = "cc"
let g:alternateSearchPath = 'sfr:../source,sfr:../src,sfr:../include,sfr:../inc,sfr:../../include,sfr:./include'

" Tagbar
" nmap <F4> :TagbarToggle<CR>
" }}}
" python-syntax {{{
let g:python_highlight_all = 1
" }}}
" ALE (linting) {{{
let g:ale_linters = {'python': ['pylint', 'flake8']}

" Use external pylint rcfile:
" let g:ale_python_pylint_options = '--rcfile=~/GIT/dotfiles/pylintrc'
let g:ale_python_flake8_options = "--max-line-length=88"
" Turn flake8 errors into warnings:
let g:ale_type_map = {'flake8': {'ES': 'WS', 'E': 'W'}}

" Ale in airline
let g:airline#extensions#ale#enabled = 1

let g:ale_sign_warning = 'âš '
let g:ale_sign_error = 'âœ—'

" Change message format to distinguish between linters:
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

map cn <esc>:ALENextWrap<cr>
map cp <esc>:ALEPreviousWrap<cr>
nnoremap <F6> :ALELint<CR>:lopen<CR>
" }}}
" vim-go {{{
let g:go_doc_keywordprg_enabled = 0 " don't overwrite the mapping for the K key

" let g:go_fmt_autosave = 0 " work-around for go fmt losing vim folds, see https://github.com/fatih/vim-go/issues/502
" }}}
" gvim {{{
" Hide gvim toolbars:
:set guioptions-=T  "remove toolbar
:set guioptions-=r  "remove right-hand scroll bar
:set guioptions-=L  "remove left-hand scroll bar
:set guioptions-=b  "remove horizontal scroll bar

" Resize gvim window via Ctrl F12
" map <C-o> :set lines-=1 lines+=1<CR>

" How to make cut/copy/paste in GVim on Ubuntu work with Ctrl+X,Ctrl+C,Ctrl+V?
" http://superuser.com/a/189198/219425
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <C-r><C-o>+
" }}}
" vim-airline {{{
" always show vim-airline:
set laststatus=2
" automatically populate the g:airline_symbols dictionary with the proper font glyphs for various symbols
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
" Automatically displays all buffers when there's only one tab open.
let g:airline#extensions#tabline#enabled = 1
" Show buffer numbers in tab list, from https://medium.com/@praveendhawan/vim-airline-powerful-status-line-4dda605adae5
let g:airline#extensions#tabline#buffer_nr_show = 1
" }}}
" vimspector {{{
" for normal mode - the word under the cursor
nmap <Leader>di <Plug>VimspectorBalloonEval
" for visual mode, the visually selected text
xmap <Leader>di <Plug>VimspectorBalloonEval
nmap <Leader>db <Plug>VimspectorBreakpoints
nmap <Leader>dc :VimspectorReset<CR>

" mappings for up/down the stack:
nmap <LocalLeader><F11> <Plug>VimspectorUpFrame
nmap <LocalLeader><F12> <Plug>VimspectorDownFrame
" }}}

" Automatically set screen title
" http://vim.wikia.com/wiki/Automatically_set_screen_title
" let &titlestring = hostname() . "[vim(" . expand("%:t") . ")]"
" if &term == "screen"
"   set t_ts=^[k
"   set t_fs=^[\
" endif
" if &term == "screen" || &term == "xterm"
"   set title
" endif
set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:p:h\")})%)%(\ %a%)\ -\ %{v:servername}

" vim:foldmethod=marker:foldlevel=0
